// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/file/editor.go
//
// Generated by this command:
//
//	mockgen -source ./internal/file/editor.go -destination ./internal/file/editor_mock.go -package file
//

// Package file is a generated GoMock package.
package file

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEditor is a mock of Editor interface.
type MockEditor struct {
	ctrl     *gomock.Controller
	recorder *MockEditorMockRecorder
}

// MockEditorMockRecorder is the mock recorder for MockEditor.
type MockEditorMockRecorder struct {
	mock *MockEditor
}

// NewMockEditor creates a new mock instance.
func NewMockEditor(ctrl *gomock.Controller) *MockEditor {
	mock := &MockEditor{ctrl: ctrl}
	mock.recorder = &MockEditorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEditor) EXPECT() *MockEditorMockRecorder {
	return m.recorder
}

// ExecEditor mocks base method.
func (m *MockEditor) ExecEditor(filePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecEditor", filePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecEditor indicates an expected call of ExecEditor.
func (mr *MockEditorMockRecorder) ExecEditor(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecEditor", reflect.TypeOf((*MockEditor)(nil).ExecEditor), filePath)
}

// Open mocks base method.
func (m *MockEditor) Open(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockEditorMockRecorder) Open(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockEditor)(nil).Open), filePath)
}
